name: ffmpeg-build-all

on:
  workflow_dispatch:
    #manual trigger

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - arch: arm64
            dockerfile: configs/ffmpeg-for-lambda/Dockerfile.arm64
            config_dir: configs/ffmpeg-for-lambda
            zip_name: ffmpeg-arm64.zip
          - arch: x86_64
            dockerfile: configs/ffmpeg-for-lambda/Dockerfile.x86_64
            config_dir: configs/ffmpeg-for-lambda
            zip_name: ffmpeg-x86_64.zip

    env:
      TIMESTAMP: ${{ github.run_id }}_${{ github.run_number }}
      ARCH: ${{ matrix.config.arch }}
      CONFIG_DIR: ${{ matrix.config.config_dir }}
      DOCKERFILE: ${{ matrix.config.dockerfile }}
      ZIP_NAME: ${{ matrix.config.zip_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create directory structure
        run: |
          mkdir -p build/${TIMESTAMP}/${ARCH}/bin
          mkdir -p build/archive/${TIMESTAMP}

      - name: Build Docker image
        run: |
          echo "Building FFmpeg for ${ARCH}..."
          echo "Building Docker image for ${ARCH}..."
          docker build -t ffmpeg-${ARCH}-builder -f ${DOCKERFILE} ${CONFIG_DIR}

      - name: Extract binaries from container
        run: |
          echo "Extracting FFmpeg binaries from container..."
          container_id=$(docker create ffmpeg-${ARCH}-builder)

          # Save the build logs
          docker logs $container_id > build/${TIMESTAMP}/${ARCH}/build.log 2>&1

          # Copy the binaries out of the container
          docker cp $container_id:/ffmpeg_build/bin/ffmpeg build/${TIMESTAMP}/${ARCH}/bin/
          docker cp $container_id:/ffmpeg_build/bin/ffprobe build/${TIMESTAMP}/${ARCH}/bin/

          # Remove the container
          docker rm $container_id > /dev/null

          # Make binaries executable
          chmod +x build/${TIMESTAMP}/${ARCH}/bin/ffmpeg build/${TIMESTAMP}/${ARCH}/bin/ffprobe

          echo "Extraction complete for ${ARCH}!"
          echo "FFmpeg binaries are available in the build/${TIMESTAMP}/${ARCH}/bin directory"
          ls -lh build/${TIMESTAMP}/${ARCH}/bin/

      - name: Create deployment package
        run: |
          echo "Creating deployment package for ${ARCH}..."

          # Include timestamp in the filename
          zip_name_with_timestamp=${ZIP_NAME/.zip/_${TIMESTAMP}.zip}
          zip_path_with_timestamp="build/archive/${TIMESTAMP}/${zip_name_with_timestamp}"

          # Create a symbolic link for the latest version
          ln -sf "${zip_name_with_timestamp}" "build/archive/${TIMESTAMP}/${ZIP_NAME}"

          # Create zip file
          cd build/${TIMESTAMP}/${ARCH}
          zip -r "${GITHUB_WORKSPACE}/build/archive/${TIMESTAMP}/${zip_name_with_timestamp}" bin/
          cd - > /dev/null

          # Copy configuration readme if it exists
          if [ -f "${CONFIG_DIR}/readme.md" ]; then
            cp "${CONFIG_DIR}/readme.md" "build/archive/${TIMESTAMP}/ffmpeg-${ARCH}-readme.md"
          fi

          echo "Deployment package created: ${zip_name_with_timestamp}"
          echo "Package location: build/archive/${TIMESTAMP}/${zip_name_with_timestamp}"
          ls -lh "build/archive/${TIMESTAMP}/${zip_name_with_timestamp}"

      - name: Create build info
        run: |
          # Record file info for reference
          echo "Build completed at: $(date)" > "build/${TIMESTAMP}/${ARCH}/build_info.txt"
          echo "Architecture: ${ARCH}" >> "build/${TIMESTAMP}/${ARCH}/build_info.txt"
          echo "Configuration: ${CONFIG_DIR}" >> "build/${TIMESTAMP}/${ARCH}/build_info.txt"
          echo "Dockerfile: ${DOCKERFILE}" >> "build/${TIMESTAMP}/${ARCH}/build_info.txt"
          echo "Binary sizes:" >> "build/${TIMESTAMP}/${ARCH}/build_info.txt"
          ls -lh build/${TIMESTAMP}/${ARCH}/bin/ >> "build/${TIMESTAMP}/${ARCH}/build_info.txt"
          echo "Zip package: build/archive/${TIMESTAMP}/${ZIP_NAME/.zip/_${TIMESTAMP}.zip}" >> "build/${TIMESTAMP}/${ARCH}/build_info.txt"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.config.arch }}-build
          path: build/archive/${TIMESTAMP}
          retention-days: 7

      - name: Clean up Docker images
        run: |
          docker rmi ffmpeg-${ARCH}-builder
          echo "Docker images removed."

  create-summary:
    needs: build-matrix
    runs-on: ubuntu-latest
    env:
      TIMESTAMP: ${{ github.run_id }}_${{ github.run_number }}
      CONFIG_DIR: configs/ffmpeg-for-lambda

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: build/archive/${TIMESTAMP}

      - name: Create build summary
        run: |
          mkdir -p build/${TIMESTAMP}
          echo "Creating build summary..."
          cat > "build/${TIMESTAMP}/summary.txt" << EOF
          FFmpeg Build Summary
          ===================
          Build ID: ${TIMESTAMP}
          Date: $(date)

          This build includes:
          - ARM64 binaries for Amazon lambda/provided:al2023
          - x86_64 binaries for Amazon lambda/provided:al2023
          - Configuration: ${CONFIG_DIR}

          Archives:
          - build/archive/${TIMESTAMP}/ffmpeg-arm64_${TIMESTAMP}.zip
          - build/archive/${TIMESTAMP}/ffmpeg-x86_64_${TIMESTAMP}.zip

          Build logs and binaries are stored in subdirectories.
          EOF

          # Copy the summary to the archive directory too
          cp "build/${TIMESTAMP}/summary.txt" "build/archive/${TIMESTAMP}/"

          # Copy configuration readme if it exists
          if [ -f "${CONFIG_DIR}/readme.md" ]; then
            cp "${CONFIG_DIR}/readme.md" "build/archive/${TIMESTAMP}/ffmpeg-config-readme.md"
          fi

          # Create a latest.txt file that contains the current build timestamp
          echo "${TIMESTAMP}" > "build/latest.txt"

          echo "Build completed successfully!"
          echo "Build outputs stored in: build/${TIMESTAMP}"
          echo "Archives stored in: build/archive/${TIMESTAMP}"

      - name: Upload summary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-build-summary
          path: build/archive/${TIMESTAMP}
          retention-days: 7
